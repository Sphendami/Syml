{
open Parser

let lexeme = FSharp.Text.Lexing.LexBuffer<_>.LexemeString

let newline (lexbuf:FSharp.Text.Lexing.LexBuffer<_>) =
    lexbuf.EndPos <- lexbuf.EndPos.NextLine

let currPos (lexbuf:FSharp.Text.Lexing.LexBuffer<_>) =
    let position = lexbuf.StartPos
    let posLine = position.Line
    let posChar = position.Column + 1
    posLine, posChar
}
rule token = parse
    [' ' '\t'] {token lexbuf}
    | '\n' {newline lexbuf; token lexbuf}
    | "//" [^'\n']* {newline lexbuf; token lexbuf}
    | ";;" {EOT (currPos lexbuf)}
    | "?+" {TRUE (currPos lexbuf)}
    | "?-" {FALSE (currPos lexbuf)}
    | "if" {IF (currPos lexbuf)}
    | "?" {THEN (currPos lexbuf)}
    | ":" {ELSE (currPos lexbuf)}
    | "\\" {FUN (currPos lexbuf)}
    | "!!" {LET (currPos lexbuf)}
    | "^" {REC (currPos lexbuf)}
    | ";" {IN (currPos lexbuf)}
    | "#help" {HASHHELP (currPos lexbuf)}
    | "#load" {HASHLOAD (currPos lexbuf)}
    | "#exit" {HASHEXIT (currPos lexbuf)}
    | '$' ['!' '?' '\'' '"' '`' '+' '-' '=' '(' ')' '[' ']' '{' '}' '<' '>' ';' ':' ',' '.' '@' '#' '$' '%' '&' '~' '|' '*' '^' '_' '/' '\\']*
        {VAR (lexeme lexbuf, currPos lexbuf)}
    | '#' ['_' '-']+ {
        let value =
            lexeme lexbuf
            |> fun s -> s.Substring 1
            |> String.map (fun c -> if c = '_' then '0' else '1')
            |> fun b -> System.Convert.ToInt32(b, 2)
        INTEGER (value, currPos lexbuf)
    }
    | '+' {PLUS (currPos lexbuf)}
    | '-' {MINUS (currPos lexbuf)}
    | '*' {STAR (currPos lexbuf)}
    | '/' {SLASH (currPos lexbuf)}
    | "&&" {ANDAND (currPos lexbuf)}
    | "||" {PIPEPIPE (currPos lexbuf)}
    | '=' {EQUAL (currPos lexbuf)}
    | '<' {LESSTHAN (currPos lexbuf)}
    | '>' {GREATERTHAN (currPos lexbuf)}
    | "<=" {LESSTHANEQ (currPos lexbuf)}
    | ">=" {GREATERTHANEQ (currPos lexbuf)}
    | "->" {RARROW (currPos lexbuf)}
    | '(' {LPAREN (currPos lexbuf)}
    | ')' {RPAREN (currPos lexbuf)}
    | eof {EOF}